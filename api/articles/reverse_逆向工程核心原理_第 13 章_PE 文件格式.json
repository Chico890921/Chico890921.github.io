{"title":"reverse::逆向工程核心原理::第 13 章::PE 文件格式","uid":"534252b15d2f382bf7caf6142baa16d6","slug":"reverse_逆向工程核心原理_第 13 章_PE 文件格式","date":"2022-07-27T20:31:25.000Z","updated":"2022-09-22T09:23:02.827Z","comments":true,"path":"api/articles/reverse_逆向工程核心原理_第 13 章_PE 文件格式.json","keywords":null,"cover":"https://i.imgur.com/NAX5ism.gif","content":"<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/prism-themes/1.9.0/prism-synthwave84.min.css\">\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>此篇為各筆記之整理，<strong>部分</strong>原創內容，資料來源可見下方連結與文後參考資料</p></blockquote>\n<p><br></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>了解 PE 結構可以修改 PE 檔案的一些屬性</strong><br>ex. 可以修改程式入口點、修改程式邏輯等…</p></blockquote>\n<h1 id=\"可執行檔案\"><a href=\"#可執行檔案\" class=\"headerlink\" title=\"可執行檔案\"></a>可執行檔案</h1><p>可執行檔案 (executable file) 指的是可以由作業系統進行加載執行的檔案<br>可執行檔案 也稱為 PE 檔案，因為可執行檔案都遵從了 PE 結構</p>\n<h2 id=\"不同作業系統的可執行檔案的格式\"><a href=\"#不同作業系統的可執行檔案的格式\" class=\"headerlink\" title=\"不同作業系統的可執行檔案的格式\"></a>不同作業系統的可執行檔案的格式</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>windows</td>\n<td>PE (Portable Executable)</td>\n</tr>\n<tr>\n<td>Linux</td>\n<td>ELF(Executable and Linking Format)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>仔細的人可能會發現 PE 的全稱是 <strong>Portable Executable</strong>，其中文意思就是可移植可執行<br>而 ELF 的全稱 <strong>Executable and Linking Format</strong> 就是可執行可鏈接格式</p>\n<p>那麼兩者之間的差距就出現了</p>\n<p>Windows 平台下的 PE 檔案結構是可移植的，也就表示其在 Windows 下是通用兼容的</p>\n<p><strong>例如你在 Windows7 下的可執行檔案也可以在 Windows8、10 系統下運行</strong><br>而 Linux 則不一樣，不同核心編譯的可執行檔案在不同核心的環境下是無法使用的</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>個人理解的 PE 文件結構其實就類似於 CTF Misc 題中的 jpg、png、zip 文件格式類似，當你了解了這些文件格式後，你可以通過修改二進制數據來改圖片寬高等屬性，同樣的，當你<strong>了解 Windows PE 文件結構後</strong>，你也<strong>可以修改 PE 文件的一些屬性</strong>，比如<strong>修改程序入口點</strong>甚至<strong>修改程序運行邏輯</strong>。</p></blockquote>\n<h2 id=\"哪些領域會用到-PE-文件格式\"><a href=\"#哪些領域會用到-PE-文件格式\" class=\"headerlink\" title=\"哪些領域會用到 PE 文件格式 ?\"></a>哪些領域會用到 PE 文件格式 ?</h2><ul>\n<li>病毒、反病毒</li>\n<li>外掛、反外掛</li>\n<li>加殼、脫殼 (保護、破解)</li>\n<li>無原始碼修改功能、軟體中文化等</li>\n</ul>\n<h1 id=\"如何識別-PE-檔案\"><a href=\"#如何識別-PE-檔案\" class=\"headerlink\" title=\"如何識別 PE 檔案\"></a>如何識別 PE 檔案</h1><p>你想要識別一個檔案是不是 PE 格式，或者說是不是一個可執行檔案，可以根據 PE 指紋來識別：</p>\n<p>首先你需要找到一個可以以 16 進位打開 PE 文件的工具（010 Editor、PEbear、PEview…）<br>然後找到一個 PE 檔案，用該工具打開 PE 檔案</p>\n<ol>\n<li><strong>在文件的開始位置有一個 0x5A4D (十進制：MZ )</strong></li>\n<li><strong>接著觀察 0x003C 位置 ( 0x00E8 )</strong>  </li>\n<li><strong>接著我們再去尋找 0x00E8 位置就會出現一個 0x4550 (十進制：PE )</strong></li>\n</ol>\n<p>如果能用這個方法可以順利的<strong>走通整個流程找到 PE</strong>，就表示這是一個 PE 文件，同樣這也是一個<strong> PE 指紋</strong>：</p>\n<p><img src=\"https://i.imgur.com/B4ayLBO.jpg\" alt=\"\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>備忘</strong><br>1 個位元組(byte) = 8 bits<br>圖中 <code>4D</code> 為 1 byte, <code>5A</code> 為 1 byte<br>原因: 它們是 <strong>16 進位</strong>，<strong>一個數為 4 bits</strong></p>\n<p>ex. &nbsp; &nbsp; 4 &nbsp; &nbsp; &nbsp; D &nbsp; &nbsp; &nbsp; 5 &nbsp; &nbsp; &nbsp; A<br> &nbsp; &nbsp; &nbsp; 0100 1101 0101 1010</p>\n<p>2 進位速算: 8 4 2 1 </p>\n<p>&nbsp; A &nbsp; B &nbsp; C &nbsp; D &nbsp; E &nbsp; F<br>10 11 12 13 14 15</p></blockquote>\n<p>如上示例中我使用的是 exe 後綴的文件，但即使不是 exe 後綴的文件，例如 .sys、.dll 後綴的文件，實際上你通過這種方式會發現它們也是 PE 文件，<strong>所以我們不要只看後綴名來認定是不是 PE 文件，而要具體去看文件中的指紋</strong>。</p>\n<p>常見的 exe、dll、sys、 ocx、com 都屬於 PE 文件。</p>\n<h2 id=\"PE-格式示意圖\"><a href=\"#PE-格式示意圖\" class=\"headerlink\" title=\"PE 格式示意圖\"></a>PE 格式示意圖</h2><p>如上所述中我們可以了解到通過 PE 指紋的方式識別 PE 文件，但是我又是如何知道這是否是一個 PE 文件的呢？這是因為 PE 文件結構有一個規範和定義，如下圖所示就是 PE 文件的整體結構：</p>\n<p><img src=\"https://i.imgur.com/4ZFCLcI.png\" alt=\"\"></p>\n<p>PE文件分為以下四大塊，依次是:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li><p>DOS實模式殘留數據</p>\n</li>\n<li><p>NT文件頭</p>\n</li>\n<li><p>節表</p>\n</li>\n<li><p>節內容</p>\n</li>\n</ul></blockquote>\n<p>這幾個主要結構體分別對應的寬度如下所示：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>結構體</th>\n<th>寬度（位元組)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IMAGE_DOS_HEADER</td>\n<td>64</td>\n</tr>\n<tr>\n<td>IMAGE_FILE_HEADER</td>\n<td>20</td>\n</tr>\n<tr>\n<td>IMAGE_OPTIONAL_HEADER32</td>\n<td>224</td>\n</tr>\n<tr>\n<td>IMAGE_SECTION_HEADER</td>\n<td>40</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><img src=\"https://i.imgur.com/JEp3cDp.png\" alt=\"\"><br><img src=\"https://i.imgur.com/yJEHnoD.png\" alt=\"\"><br><img src=\"https://i.imgur.com/uqLtetE.jpg\" alt=\"\"></p>\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h1><h2 id=\"DOS-Headers\"><a href=\"#DOS-Headers\" class=\"headerlink\" title=\"DOS Headers\"></a>DOS Headers</h2><p>在 Windows NT 之前的 Windows 系統是基於 dos 作業系統核心，為了兼容 dos 系統上可執行文件，Windows NT 在設計可執行文件格式時保留兼容了之前的格式。</p>\n<p>PE 文件中的 DOS 實模式殘留數據包括兩部分:  <strong>DOS 頭</strong> +  <strong>DOS Stub</strong><br><strong>IMAGE_DOS_HEADER結構</strong>，這個結構佔64字節，文件前四行就是了</p>\n<p><img src=\"https://i.imgur.com/Dpvvo51.jpg\" alt=\"\"></p>\n<p>接著是DOS stub，這個大小是不固定的，但是在上文中，我們了解到可以根據某個值定位到PE文件頭，我們可以先找到PE文件頭，<strong>這樣夾在他們之間的就是DOS塊了</strong>，在這裡就是<strong>IMAGE_DOS_HEADER結構體的e_lfanew成員</strong>，如上圖所示這裡對應的值是0xE0</p>\n<p>DOS MZ文件頭就是一個結構體IMAGE_DOS_HEADER，其定義如下所示</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IMAGE_DOS_HEADER</span> &#123;</span>      <span class=\"comment\">// DOS .EXE header</span></span><br><span class=\"line\">    WORD   e_magic;                     <span class=\"comment\">// Magic number</span></span><br><span class=\"line\">    WORD   e_cblp;                      <span class=\"comment\">// Bytes on last page of file</span></span><br><span class=\"line\">    WORD   e_cp;                        <span class=\"comment\">// Pages in file</span></span><br><span class=\"line\">    WORD   e_crlc;                      <span class=\"comment\">// Relocations</span></span><br><span class=\"line\">    WORD   e_cparhdr;                   <span class=\"comment\">// Size of header in paragraphs</span></span><br><span class=\"line\">    WORD   e_minalloc;                  <span class=\"comment\">// Minimum extra paragraphs needed</span></span><br><span class=\"line\">    WORD   e_maxalloc;                  <span class=\"comment\">// Maximum extra paragraphs needed</span></span><br><span class=\"line\">    WORD   e_ss;                        <span class=\"comment\">// Initial (relative) SS value</span></span><br><span class=\"line\">    WORD   e_sp;                        <span class=\"comment\">// Initial SP value</span></span><br><span class=\"line\">    WORD   e_csum;                      <span class=\"comment\">// Checksum</span></span><br><span class=\"line\">    WORD   e_ip;                        <span class=\"comment\">// Initial IP value</span></span><br><span class=\"line\">    WORD   e_cs;                        <span class=\"comment\">// Initial (relative) CS value</span></span><br><span class=\"line\">    WORD   e_lfarlc;                    <span class=\"comment\">// File address of relocation table</span></span><br><span class=\"line\">    WORD   e_ovno;                      <span class=\"comment\">// Overlay number</span></span><br><span class=\"line\">    WORD   e_res[<span class=\"number\">4</span>];                    <span class=\"comment\">// Reserved words</span></span><br><span class=\"line\">    WORD   e_oemid;                     <span class=\"comment\">// OEM identifier (for e_oeminfo)</span></span><br><span class=\"line\">    WORD   e_oeminfo;                   <span class=\"comment\">// OEM information; e_oemid specific</span></span><br><span class=\"line\">    WORD   e_res2[<span class=\"number\">10</span>];                  <span class=\"comment\">// Reserved words</span></span><br><span class=\"line\">    LONG   e_lfanew;                    <span class=\"comment\">// Offset to start of PE header</span></span><br><span class=\"line\">  &#125; IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;</span><br></pre></td></tr></table></figure>\n<p>它有很多成員，但我們並不需要去深入的理解每個成員的含義和作用，這是因為這個結構體是給16位平台看的，而我們現在的環境大部分都是32位和64位的，所以現在的平台不再需要這個完整的結構體了，只需要其中的兩個成員<code>e_magic</code>和<code>e_lfanew</code>。</p>\n<p>你可以嘗試在16進制的編輯器中去編輯某個EXE文件保留兩個成員e_magic和e_lfanew，其他的以0x00填充，然後保存文件，你會發現修改後的文件還是可以正常運行的</p>\n<p><img src=\"https://i.imgur.com/X8jmKw0.png\" alt=\"\"></p>\n<p>保留這兩個成員的原因是因為它們代表著我們之前所說的PE指紋，操作系統也是根據這個來識別是否是PE文件的，所以不能夠更改、刪除（<strong>e_magic是一種標識，e_lfanew則表示PE文件頭的位置</strong>）。</p>\n<p>重點關注的是最後一個字段， 有時稱為 3C 字段，它指示了 windows NT PE 文件頭的偏移位置。</p>\n<h3 id=\"DOS-Stub\"><a href=\"#DOS-Stub\" class=\"headerlink\" title=\"DOS Stub\"></a>DOS Stub</h3><p>DOS塊就是夾在DOS MZ文件頭和PE文件頭之間的內容，大小不固定，即使沒有DOS存根文件也能正常運行，這裡面的內容可以根據自己的需要隨意的修改和添加，並不會影響文件的正常運行。</p>\n<p><img src=\"https://i.imgur.com/0nBvkw0.png\" alt=\"\"></p>\n<p>如上圖，文件Offset 0x40~0x4D這篇區域為16位的彙編指令，在32位及以上操作系統運行程序時不會執行該指令。在DOS環境中或使用DOS調試器運行它時，會執行這段指令（因為如DOS等16位操作系統不認識PE文件，識別成DOS EXE文件，所以執行這一段）。</p>\n<p>在WindowsXP下，運行命令debug notepad.exe啟動notepad.exe，在出現的光標位置輸入“u”指令，會出現16位彙編指令。</p>\n<p><img src=\"https://i.imgur.com/5I77cDh.png\" alt=\"\"></p>\n<p>大概意思就是會在終端中輸出字符串“This program cannot be run in DOS mode”後就退出程序，換言之這裡DOS存根的作用就是當32位程序在16位DOS下運行時，就會提示“This program cannot be run in DOS mode”後就退出程序，作為對MS-DOS的兼容。</p>\n<h2 id=\"NT-Headers\"><a href=\"#NT-Headers\" class=\"headerlink\" title=\"NT Headers\"></a>NT Headers</h2><p>前面提到: DOS 頭的最後一個字段指示了 NT 頭的位置。</p>\n<p>NT 頭分為三個部分:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IMAGE_NT_HEADERS</span> &#123;</span></span><br><span class=\"line\">    DWORD Signature; <span class=\"comment\">// PE标识</span></span><br><span class=\"line\">    IMAGE_FILE_HEADER FileHeader; <span class=\"comment\">// 标准PE头</span></span><br><span class=\"line\">    IMAGE_OPTIONAL_HEADER32 OptionalHeader; <span class=\"comment\">// 扩展PE头</span></span><br><span class=\"line\">&#125; IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;</span><br></pre></td></tr></table></figure></p>\n<p>其第一個是PE文件頭標誌，這裡佔4字節，也就是圖中所示的0x4550（<strong>PE標識是不能修改的</strong>，因為操作系統在啟動一個程序的時候會檢測這個標識）<br>第二部分就是<strong>PE文件表頭IMAGE_FILE_HEADER結構</strong>，這個結構佔20字節，我們也稱之為<strong>標準PE頭</strong></p>\n<p><img src=\"https://i.imgur.com/9W1ztXu.jpg\" alt=\"\"></p>\n<p>繼續看PE文件頭的第三個部分PE文件表頭可選部分，我們也稱之為擴展PE頭，其就是<strong>IMAGE_OPTIONAL_HEADER32結構</strong>，默認情況下<strong>它在32位下是224 byte，在64位下是240 byte</strong>，你也可以通過<strong>IMAGE_FILE_HEADER結構的成員( SizeOfOptionalHeader )去獲取/修改</strong>擴展PE頭的寬度</p>\n<p>以上圖為例，<code>SizeOfOptionalHeader</code> 對應在 0x00F4 位址的值為 0x00E0 =&gt; 32位元 =&gt; 224 byte</p>\n<p>擴展PE頭之所以數據寬度較大，是因為其有一個成員是結構體數組</p>\n<h3 id=\"File-Header\"><a href=\"#File-Header\" class=\"headerlink\" title=\"File Header\"></a>File Header</h3><p>標準PE頭是PE頭的第二個成員，它是如下所示的結構體</p>\n<p><img src=\"https://i.imgur.com/U6SflrH.png\" alt=\"\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IMAGE_FILE_HEADER</span> &#123;</span></span><br><span class=\"line\">    WORD    Machine; <span class=\"comment\">// 可以运行在什么样的CPU上</span></span><br><span class=\"line\">    WORD    NumberOfSections; <span class=\"comment\">// 表示节的数量</span></span><br><span class=\"line\">    DWORD   TimeDateStamp; <span class=\"comment\">// 编译器填写的时间戳</span></span><br><span class=\"line\">    DWORD   PointerToSymbolTable; <span class=\"comment\">// 调试相关</span></span><br><span class=\"line\">    DWORD   NumberOfSymbols; <span class=\"comment\">// 调试相关</span></span><br><span class=\"line\">    WORD    SizeOfOptionalHeader; <span class=\"comment\">// 扩展PE头的大小</span></span><br><span class=\"line\">    WORD    Characteristics; <span class=\"comment\">// 文件属性</span></span><br><span class=\"line\">&#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;</span><br></pre></td></tr></table></figure>\n<h4 id=\"成員-Machine-重要\"><a href=\"#成員-Machine-重要\" class=\"headerlink\" title=\"成員 Machine ( 重要 )\"></a><strong>成員 Machine ( 重要 )</strong></h4><p>其第一個成員Machine表示可以運行在什麼樣的CPU上，<strong>如果它的值為0x0則表示可以運行在任意的CPU上，支持在Intel 386以及後續的型號CPU運行則值為0x14c，支持64位的CPU型號則值為0x8664</strong>。</p>\n<p>我們可以分別在32位、64位系統上提取notepad.exe進行對比來看看這個成員（010 Editor → Tools → Compare Files…</p>\n<p><img src=\"https://i.imgur.com/Jzez2B8.png\" alt=\"\"><br><img src=\"https://i.imgur.com/2I5ddhF.png\" alt=\"\"></p>\n<h4 id=\"成員-NumberOfSections-重要\"><a href=\"#成員-NumberOfSections-重要\" class=\"headerlink\" title=\"成員 NumberOfSections ( 重要 )\"></a><strong>成員 NumberOfSections ( 重要 )</strong></h4><p>第二個成員<strong>NumberOfSections表示當前PE文件中節的數量</strong>，也就是節表中有幾個結構體<br>值一定要大於0，且當定義的節區數量與實際節區不同時，將發生運行錯誤。</p>\n<h4 id=\"成員-TimeDateStamp\"><a href=\"#成員-TimeDateStamp\" class=\"headerlink\" title=\"成員 TimeDateStamp\"></a>成員 TimeDateStamp</h4><p>第三個成員<strong>TimeDateStamp表示編譯器編譯的時候插入的時間戳</strong>，與文件屬性裡面的創建時間和修改時間是無關的</p>\n<h4 id=\"成員-PointerToSymbolTable-amp-NumberOfSymbols\"><a href=\"#成員-PointerToSymbolTable-amp-NumberOfSymbols\" class=\"headerlink\" title=\"成員 PointerToSymbolTable &amp; NumberOfSymbols\"></a>成員 PointerToSymbolTable &amp; NumberOfSymbols</h4><p>第四、第五個成員是調試相關的，我們暫時不用去了解</p>\n<h4 id=\"成員-SizeOfOptionalHeader-重要\"><a href=\"#成員-SizeOfOptionalHeader-重要\" class=\"headerlink\" title=\"成員 SizeOfOptionalHeader ( 重要 )\"></a><strong>成員 SizeOfOptionalHeader ( 重要 )</strong></h4><p>第六個成<strong>員SizeOfOptionalHeader表示擴展PE頭的大小</strong>，<strong>默認情況下32位PE文件對應值位0xE0，64位PE文件對應值為0xF0</strong></p>\n<h4 id=\"成員-Characteristics-重要\"><a href=\"#成員-Characteristics-重要\" class=\"headerlink\" title=\"成員 Characteristics ( 重要 )\"></a><strong>成員 Characteristics ( 重要 )</strong></h4><p><code>WORD Characteristics</code><br>2 BYTE =&gt; 16 位<br>第七個成員<strong>Characteristics用來記錄當前PE文件的一些屬性</strong>，該成員是16位（2字節）大小，其每一數據位對應的屬性如下所示</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>數據位</th>\n<th>常量符號</th>\n<th>Characteristics 值</th>\n<th>為 1 時 的意義</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>IMAGE_FILE_RELOCS-STRIPPED</td>\n<td>0x0001</td>\n<td>文件中不存在重定位資訊</td>\n</tr>\n<tr>\n<td><font color=#FFD700>1</font></td>\n<td><font color=#FFD700>IMAGE_FILE_EXECUTABLE_IMAGE</font></td>\n<td><font color=#FFD700>0x0002</font></td>\n<td><font color=#FFD700>文件是可執行的</font></td>\n</tr>\n<tr>\n<td>2</td>\n<td>IMAGE_FILE_LINE_NUMS_STRIPPED</td>\n<td>0x0004</td>\n<td>不存在行資訊</td>\n</tr>\n<tr>\n<td>3</td>\n<td>IMAGE_FILE_LOCAL_SYMS_STRIPPED</td>\n<td>0x0008</td>\n<td>不存在符號資訊</td>\n</tr>\n<tr>\n<td>4</td>\n<td>IMAGE_FILE_AGGRESSIVE_WS_TRIM</td>\n<td>0x0010</td>\n<td>調整工作集</td>\n</tr>\n<tr>\n<td>5</td>\n<td>IMAGE_FILE_LARGE_ADDRESS_AWARE</td>\n<td>0x0020</td>\n<td>應用程式可處理大於 2GB 的位址 <br>(表示當前程式為 64 位元) <br>(32 位元有 4GB 空間，內核佔 2 GB，應用程式佔&lt;= 2GB)</td>\n</tr>\n<tr>\n<td>6</td>\n<td></td>\n<td></td>\n<td>此標誌保留</td>\n</tr>\n<tr>\n<td>7</td>\n<td>IMAGE_FILE_BYTES_REVERSED_LO</td>\n<td>0x0080</td>\n<td>小尾方式</td>\n</tr>\n<tr>\n<td>8</td>\n<td>IMAGE_FILE_32BIT_MACHINE</td>\n<td>0x0100</td>\n<td>只在 32 位元平台上執行</td>\n</tr>\n<tr>\n<td>9</td>\n<td>IMAGE_FILE_DEBUG_STRIPPED</td>\n<td>0x0200</td>\n<td>不包含除錯資訊</td>\n</tr>\n<tr>\n<td>10</td>\n<td>IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP</td>\n<td>0x0400</td>\n<td>不能從可移動盤執行</td>\n</tr>\n<tr>\n<td>11</td>\n<td>IMAGE_FILE_NET_RUN_FROM_SWAP</td>\n<td>0x0800</td>\n<td>不能從網路執行</td>\n</tr>\n<tr>\n<td>12</td>\n<td>IMAGE_FILE_SYSTEM</td>\n<td>0x1000</td>\n<td>系統檔案(如驅動程式)，不能直接執行</td>\n</tr>\n<tr>\n<td><font color=#FFD700>13</font></td>\n<td><font color=#FFD700>IMAGE_FILE_DLL</font></td>\n<td><font color=#FFD700>0x2000</font></td>\n<td><font color=#FFD700>這是一個 DLL 文件</font></td>\n</tr>\n<tr>\n<td>14</td>\n<td>IMAGE_FILE_UP_SYSTEM_ONLY</td>\n<td>0x4000</td>\n<td>文件不能在多處理器電腦上執行</td>\n</tr>\n<tr>\n<td>15</td>\n<td>IMAGE_FILE_BYTES_REVERSED_HI</td>\n<td>0x8000</td>\n<td>大尾方式</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h5 id=\"以-010F-為例\"><a href=\"#以-010F-為例\" class=\"headerlink\" title=\"以 010F 為例\"></a>以 <code>010F</code> 為例</h5><p><img src=\"https://i.imgur.com/gIJiiHX.png\" alt=\"\"><br><code>010F</code> =&gt; 0000 0001 0000 1111<br>=&gt; 第 8、3、2、1、0 位</p>\n<h3 id=\"Optional-Header\"><a href=\"#Optional-Header\" class=\"headerlink\" title=\"Optional Header\"></a>Optional Header</h3><p>這個結構是整個PE文件中佔重要地位，記錄的PE文件的代碼執行入口、運行平台、堆棧屬性等等信息，絕對不能沒有</p>\n<p><img src=\"https://i.imgur.com/Sp3Go7P.png\" alt=\"\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IMAGE_OPTIONAL_HEADER</span> &#123;</span></span><br><span class=\"line\">    WORD    Magic; <span class=\"comment\">// PE32：10B PE32+：20B</span></span><br><span class=\"line\">    BYTE    MajorLinkerVersion; <span class=\"comment\">// 链接器版本号</span></span><br><span class=\"line\">    BYTE    MinorLinkerVersion; <span class=\"comment\">// 链接器版本号</span></span><br><span class=\"line\">    DWORD   SizeOfCode; <span class=\"comment\">// 所有代码节的总和（文件对齐后的大小），编译器填的（没用）</span></span><br><span class=\"line\">    DWORD   SizeOfInitializedData; <span class=\"comment\">// 包含所有已经初始化数据的节的总大小（文件对齐后的大小），编译器填的（没用）</span></span><br><span class=\"line\">    DWORD   SizeOfUninitializedData; <span class=\"comment\">// 包含未初始化数据的节的总大小（文件对齐后的大小），编译器填的（没用）</span></span><br><span class=\"line\">    DWORD   AddressOfEntryPoint; <span class=\"comment\">// 程序入口</span></span><br><span class=\"line\">    DWORD   BaseOfCode; <span class=\"comment\">// 代码开始的基址，编译器填的（没用）</span></span><br><span class=\"line\">    DWORD   BaseOfData; <span class=\"comment\">// 数据开始的基址，编译器填的（没用）</span></span><br><span class=\"line\">    DWORD   ImageBase; <span class=\"comment\">// 内存镜像基址</span></span><br><span class=\"line\">    DWORD   SectionAlignment; <span class=\"comment\">// 内存对齐</span></span><br><span class=\"line\">    DWORD   FileAlignment; <span class=\"comment\">// 文件对齐</span></span><br><span class=\"line\">    WORD    MajorOperatingSystemVersion; <span class=\"comment\">// 标识操作系统版本号，主版本号</span></span><br><span class=\"line\">    WORD    MinorOperatingSystemVersion; <span class=\"comment\">// 标识操作系统版本号，次版本号</span></span><br><span class=\"line\">    WORD    MajorImageVersion; <span class=\"comment\">// PE文件自身的版本号 </span></span><br><span class=\"line\">    WORD    MinorImageVersion; <span class=\"comment\">// PE文件自身的版本号</span></span><br><span class=\"line\">    WORD    MajorSubsystemVersion; <span class=\"comment\">// 运行所需子系统版本号</span></span><br><span class=\"line\">    WORD    MinorSubsystemVersion; <span class=\"comment\">// 运行所需子系统版本号</span></span><br><span class=\"line\">    DWORD   Win32VersionValue; <span class=\"comment\">// 子系统版本的值，必须为0</span></span><br><span class=\"line\">    DWORD   SizeOfImage; <span class=\"comment\">// 内存中整个PE文件的映射的尺寸</span></span><br><span class=\"line\">    DWORD   SizeOfHeaders; <span class=\"comment\">// 所有头加节表按照文件对齐后的大小，否则加载会出错</span></span><br><span class=\"line\">    DWORD   CheckSum; <span class=\"comment\">// 校验和</span></span><br><span class=\"line\">    WORD    Subsystem; <span class=\"comment\">// 子系统，驱动程序(1)、图形界面(2) 、控制台/DLL(3)</span></span><br><span class=\"line\">    WORD    DllCharacteristics; <span class=\"comment\">// 文件特性</span></span><br><span class=\"line\">    DWORD   SizeOfStackReserve; <span class=\"comment\">// 初始化时保留的栈大小 </span></span><br><span class=\"line\">    DWORD   SizeOfStackCommit; <span class=\"comment\">// 初始化时实际提交的大小 </span></span><br><span class=\"line\">    DWORD   SizeOfHeapReserve; <span class=\"comment\">// 初始化时保留的堆大小</span></span><br><span class=\"line\">    DWORD   SizeOfHeapCommit; <span class=\"comment\">// 初始化时实践提交的大小 </span></span><br><span class=\"line\">    DWORD   LoaderFlags; <span class=\"comment\">// 调试相关</span></span><br><span class=\"line\">    DWORD   NumberOfRvaAndSizes; <span class=\"comment\">// 目录项数目</span></span><br><span class=\"line\">    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES]; <span class=\"comment\">// 表，结构体数组</span></span><br><span class=\"line\">&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;</span><br></pre></td></tr></table></figure>\n<p>擴展PE頭的成員有很多，但我們不需要每個都記住，大概的了解一下即可，重點關注如下這幾個成員</p>\n<h4 id=\"成員-Magic-重要\"><a href=\"#成員-Magic-重要\" class=\"headerlink\" title=\"成員 Magic ( 重要 )\"></a>成員 Magic ( 重要 )</h4><p>成員<strong>Magic表示當前PE文件是32位還是64位</strong>，32位時該值對應0x10B，64位時該值對應0x20B</p>\n<h4 id=\"成員-AddressOfEntryPoint-重要\"><a href=\"#成員-AddressOfEntryPoint-重要\" class=\"headerlink\" title=\"成員 AddressOfEntryPoint ( 重要 )\"></a>成員 AddressOfEntryPoint ( 重要 )</h4><p>成員<strong>AddressOfEntryPoint表示當前程序入口的地址</strong>，這個成員要與成員ImageBase相加才能得出真正的入口地址，成員<strong>ImageBase用來表示內存鏡像基址</strong>，也就是<strong>PE文件在內存中按內存對齊展開後的首地址</strong>，我們可以在實際PE文件中看下，如下圖所示就是PE文件靜態狀態下的兩個成員值，<strong>AddressOfEntryPoint</strong>為0x739D，<strong>ImageBase</strong>為0x1000000，那麼最終的程序在內存中的入口地址就是0x100739D</p>\n<p><img src=\"https://i.imgur.com/6UIyqJ5.png\" alt=\"\"></p>\n<h4 id=\"成員-ImageBase-重要\"><a href=\"#成員-ImageBase-重要\" class=\"headerlink\" title=\"成員 ImageBase ( 重要 )\"></a><strong>成員 ImageBase ( 重要 )</strong></h4><h4 id=\"成員-SectionAlignment-amp-FileAlignment-須改-重要\"><a href=\"#成員-SectionAlignment-amp-FileAlignment-須改-重要\" class=\"headerlink\" title=\"==成員 SectionAlignment &amp; FileAlignment== 須改 ( 重要 )\"></a>==成員 SectionAlignment &amp; FileAlignment== 須改 ( 重要 )</h4><p>FileAlignment：指定了節區塊在磁盤文件中的最小單位</p>\n<p>SectionAlignment：指定了節區在內存中的最小單位</p>\n<p>FileAlignment和SectionAlignment的作用就是我們在本文“文件對齊/內存對齊”中講到的，節區與節區之間的間隔，之所以會有間隔就是因為PE文件的節區在硬盤中和在內存中的大小不一致導致的。一個文件的FileAlignment和SectionAlignment的值可能相同或不同。PE文件在磁盤或內存中時，節區大小一定是FileAlignment或SectionAlignment值的整數倍。</p>\n<h4 id=\"成員-SizeOfImage-重要\"><a href=\"#成員-SizeOfImage-重要\" class=\"headerlink\" title=\"成員 SizeOfImage ( 重要 )\"></a>成員 SizeOfImage ( 重要 )</h4><p>成員<strong>SizeOfImage表示在內存中整個PE文件映射的大小</strong>，可比實際的值大（內存對齊之後的大小，也就表示必須是SectionAlignment的整數倍）</p>\n<h4 id=\"成員-SizeOfHeaders-重要\"><a href=\"#成員-SizeOfHeaders-重要\" class=\"headerlink\" title=\"成員 SizeOfHeaders ( 重要 )\"></a>成員 SizeOfHeaders ( 重要 )</h4><p>該成員用來表示<strong>DOS頭、PE頭與節表加起來按照文件對齊以後的大小</strong>。這個真正的大小實際上取決於另外一個成員<strong>FileAlignment</strong>，<strong>SizeOfHeaders</strong>存儲的數值一定是<strong>FileAlignment</strong>的整數倍，默認情況下該成員的值為0x200</p>\n<p>假設當前<strong>DOS頭、PE頭與節表加起來的寬度為302，而成員FileAlignment的值為200，這時候成員SizeOfHeaders的值按FileAlignment的值進行文件對齊就應該是400，</strong>而之所以需要文件對齊是為了提高執行效率，這是一個<strong>犧牲空間換時間</strong>的一種策略，我們可以在當前PE文件中查看這兩個成員</p>\n<p><img src=\"https://i.imgur.com/ZwzawxS.png\" alt=\"\"></p>\n<p>這兩個成員剛好與我們假設的值是一樣的，所以這裡<strong>DOS頭、PE頭與節表加起來按照文件對齊以後的大小</strong>就是400，但這樣確實比實際大小要多出一些空間，這些空間默認會用0x00填充，但也有可能這些空間會被編譯器插入一些信息，接著<strong>在400地址之後的就是節數據了</strong>。</p>\n<h4 id=\"成員-CheckSum-重要\"><a href=\"#成員-CheckSum-重要\" class=\"headerlink\" title=\"成員 CheckSum ( 重要 )\"></a>成員 CheckSum ( 重要 )</h4><p>成員<strong>CheckSum表示校驗和，是用來判斷文件是否被修改的</strong>，它的計算方法就是文件的兩個字節與兩個字節相加，最終的值（不考慮溢出情況）就是校驗和</p>\n<h4 id=\"成員-Subsystem-重要\"><a href=\"#成員-Subsystem-重要\" class=\"headerlink\" title=\"成員 Subsystem ( 重要 )\"></a>成員 Subsystem ( 重要 )</h4><p>Subsystem值用來區分系統驅動文件（.sys）與普通的可執行文件（.exe、* .dll），可以有如下值如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SUBSYSTEM_UNKNOWN                  0   <span class=\"comment\">// Unknown subsystem.</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SUBSYSTEM_NATIVE                   1   <span class=\"comment\">// Image doesn&#x27;t require a subsystem.</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SUBSYSTEM_WINDOWS_GUI              2   <span class=\"comment\">// Image runs in the Windows GUI subsystem.</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SUBSYSTEM_WINDOWS_CUI              3   <span class=\"comment\">// Image runs in the Windows character subsystem.</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SUBSYSTEM_OS2_CUI                  5   <span class=\"comment\">// image runs in the OS/2 character subsystem.</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SUBSYSTEM_POSIX_CUI                7   <span class=\"comment\">// image runs in the Posix character subsystem.</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SUBSYSTEM_NATIVE_WINDOWS           8   <span class=\"comment\">// image is a native Win9x driver.</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SUBSYSTEM_WINDOWS_CE_GUI           9   <span class=\"comment\">// Image runs in the Windows CE subsystem.</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SUBSYSTEM_EFI_APPLICATION          10  <span class=\"comment\">//</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER  11  <span class=\"comment\">//</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER       12  <span class=\"comment\">//</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SUBSYSTEM_EFI_ROM                  13</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SUBSYSTEM_XBOX                     14</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION 16</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SUBSYSTEM_XBOX_CODE_CATALOG        17</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"成員-NumberOfRvaAndSizes-重要\"><a href=\"#成員-NumberOfRvaAndSizes-重要\" class=\"headerlink\" title=\"成員 NumberOfRvaAndSizes ( 重要 )\"></a>成員 NumberOfRvaAndSizes ( 重要 )</h4><p> 用來指定DataDirectory（IMAGE_OPTIONAL_HEADER32結構體最後一個成員）數組的個數。雖然結構體中明確定義了數組個數為IMAGE_NUMBEROF_DIRECTORY_ENTRIES(16個)，但是PE裝載器用過查看NumberOfRvaAndSizes值來識別數組大小，換言之，數組大小也可能不是16。</p>\n<h4 id=\"DLLCharaqcteristics\"><a href=\"#DLLCharaqcteristics\" class=\"headerlink\" title=\"DLLCharaqcteristics\"></a>DLLCharaqcteristics</h4><p>它用來<strong>表示PE文件的特性</strong>，但不要被名字所迷惑，它不是針對DLL文件的；它的數據寬度是16位（4字節），其每一數據位對應的屬性如下所示</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>數據位</th>\n<th>常量符號</th>\n<th>為 1 時 的含意</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td></td>\n<td>保留，必須為 0</td>\n</tr>\n<tr>\n<td>1</td>\n<td></td>\n<td>保留，必須為 0</td>\n</tr>\n<tr>\n<td>2</td>\n<td></td>\n<td>保留，必須為 0</td>\n</tr>\n<tr>\n<td>3</td>\n<td></td>\n<td>保留，必須為 0</td>\n</tr>\n<tr>\n<td>6</td>\n<td>IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE</td>\n<td>DLL 可以在加載時被重定位</td>\n</tr>\n<tr>\n<td>7</td>\n<td>IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY</td>\n<td>強制代碼實施完整性驗證</td>\n</tr>\n<tr>\n<td>8</td>\n<td>IMAGE_DLLCHARACTERISTICS_NX_COMPAT</td>\n<td>該映像兼容 DEP</td>\n</tr>\n<tr>\n<td>9</td>\n<td>IMAGE_DLLCHARACTERISTICS_NO_ISOLATION</td>\n<td>可以隔離，但並不隔離此映像</td>\n</tr>\n<tr>\n<td>10</td>\n<td>IMAGE_DLLCHARACTERISTICS_NO_SEH</td>\n<td>映像不使用 SEH (第10章)</td>\n</tr>\n<tr>\n<td>11</td>\n<td>IMAGE_DLLCHARACTERISTICS_NO_BIND</td>\n<td>不綁定映像</td>\n</tr>\n<tr>\n<td>12</td>\n<td></td>\n<td>保留，必須為 0</td>\n</tr>\n<tr>\n<td>13</td>\n<td>IMAGE_DLLCHARACTERISTICS_WDM_DRIVER</td>\n<td>該映像為一個 WDM driver</td>\n</tr>\n<tr>\n<td>14</td>\n<td></td>\n<td>保留，必須為 0</td>\n</tr>\n<tr>\n<td>15</td>\n<td>IMAGE_DLLCHARACTERISTICS_TERMIVAL_SERVER AWARE</td>\n<td>可用於終端服務器</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"成員-DataDirectory-重要\"><a href=\"#成員-DataDirectory-重要\" class=\"headerlink\" title=\"成員 DataDirectory ( 重要 )\"></a>成員 DataDirectory ( 重要 )</h4><p>擴展PE頭之所以數據寬度較大，是因為其有一個成員是結構體數組<br>這個成員的寬度就是16個<strong>IMAGE_DATA_DIRECTORY</strong>結構體的寬度。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_NUMBEROF_DIRECTORY_ENTRIES 16  </span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IMAGE_DATA_DIRECTORY</span> &#123;</span>  </span><br><span class=\"line\"> DWORD VirtualAddress; <span class=\"comment\">//RVA  </span></span><br><span class=\"line\"> DWORD Size;   <span class=\"comment\">//大小  </span></span><br><span class=\"line\">&#125; IMAGE_DATA_DIRECTORY,  *PIMAGE_DATA_DIRECTORY;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_DIRECTORY_ENTRY_EXPORT          0   <span class=\"comment\">// Export Directory</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_DIRECTORY_ENTRY_IMPORT          1   <span class=\"comment\">// Import Directory</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_DIRECTORY_ENTRY_RESOURCE        2   <span class=\"comment\">// Resource Directory</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_DIRECTORY_ENTRY_EXCEPTION       3   <span class=\"comment\">// Exception Directory</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_DIRECTORY_ENTRY_SECURITY        4   <span class=\"comment\">// Security Directory</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_DIRECTORY_ENTRY_BASERELOC       5   <span class=\"comment\">// Base Relocation Table</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_DIRECTORY_ENTRY_DEBUG           6   <span class=\"comment\">// Debug Directory</span></span></span><br><span class=\"line\"><span class=\"comment\">//      IMAGE_DIRECTORY_ENTRY_COPYRIGHT       7   // (X86 usage)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_DIRECTORY_ENTRY_ARCHITECTURE    7   <span class=\"comment\">// Architecture Specific Data</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_DIRECTORY_ENTRY_GLOBALPTR       8   <span class=\"comment\">// RVA of GP</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_DIRECTORY_ENTRY_TLS             9   <span class=\"comment\">// TLS Directory</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG    10   <span class=\"comment\">// Load Configuration Directory</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT   11   <span class=\"comment\">// Bound Import Directory in headers</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_DIRECTORY_ENTRY_IAT            12   <span class=\"comment\">// Import Address Table</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT   13   <span class=\"comment\">// Delay Load Import Descriptors</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR 14   <span class=\"comment\">// COM Runtime descriptor</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">DataDirectory[<span class=\"number\">0</span>] = IMAGE_DIRECTORY_ENTRY_EXPORT             <span class=\"comment\">// Export Directory</span></span><br><span class=\"line\">DataDirectory[<span class=\"number\">1</span>] = IMAGE_DIRECTORY_ENTRY_IMPORT             <span class=\"comment\">// Import Directory</span></span><br><span class=\"line\">DataDirectory[<span class=\"number\">2</span>] = IMAGE_DIRECTORY_ENTRY_RESOURCE           <span class=\"comment\">// Resource Directory</span></span><br><span class=\"line\">DataDirectory[<span class=\"number\">3</span>] = IMAGE_DIRECTORY_ENTRY_EXCEPTION          <span class=\"comment\">// Exception Directory</span></span><br><span class=\"line\">DataDirectory[<span class=\"number\">4</span>] = IMAGE_DIRECTORY_ENTRY_SECURITY           <span class=\"comment\">// Security Directory</span></span><br><span class=\"line\">DataDirectory[<span class=\"number\">5</span>] = IMAGE_DIRECTORY_ENTRY_BASERELOC          <span class=\"comment\">// Base Relocation Table</span></span><br><span class=\"line\">DataDirectory[<span class=\"number\">6</span>] = IMAGE_DIRECTORY_ENTRY_DEBUG              <span class=\"comment\">// Debug Directory</span></span><br><span class=\"line\"><span class=\"comment\">//      IMAGE_DIRECTORY_ENTRY_COPYRIGHT          // (X86 usage)</span></span><br><span class=\"line\">DataDirectory[<span class=\"number\">7</span>] = IMAGE_DIRECTORY_ENTRY_ARCHITECTURE       <span class=\"comment\">// Architecture Specific Data</span></span><br><span class=\"line\">DataDirectory[<span class=\"number\">8</span>] = IMAGE_DIRECTORY_ENTRY_GLOBALPTR          <span class=\"comment\">// RVA of GP</span></span><br><span class=\"line\">DataDirectory[<span class=\"number\">9</span>] = IMAGE_DIRECTORY_ENTRY_TLS                <span class=\"comment\">// TLS Directory</span></span><br><span class=\"line\">DataDirectory[<span class=\"number\">10</span>] = IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG       <span class=\"comment\">// Load Configuration Directory</span></span><br><span class=\"line\">DataDirectory[<span class=\"number\">11</span>] = IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT      <span class=\"comment\">// Bound Import Directory in headers</span></span><br><span class=\"line\">DataDirectory[<span class=\"number\">12</span>] = IMAGE_DIRECTORY_ENTRY_IAT               <span class=\"comment\">// Import Address Table</span></span><br><span class=\"line\">DataDirectory[<span class=\"number\">13</span>] = IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT      <span class=\"comment\">// Delay Load Import Descriptors</span></span><br><span class=\"line\">DataDirectory[<span class=\"number\">14</span>] = IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR    <span class=\"comment\">// COM Runtime descriptor</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Section-Header\"><a href=\"#Section-Header\" class=\"headerlink\" title=\"Section Header\"></a>Section Header</h3><p>節表很重要，其決定節數據的相關屬性，而節數據是我們真正存儲數據的地方，其數量和節表是對應的。</p>\n<p>節表就是N個<strong>IMAGE_SECTION_HEADER結構體</strong>組成的，該結構體數據寬度是40字節</p>\n<p>該結構體的數量在PE文件頭的NumberOfSections指定。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SIZEOF_SHORT_NAME 8</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IMAGE_SECTION_HEADER</span> &#123;</span></span><br><span class=\"line\">    BYTE    Name[IMAGE_SIZEOF_SHORT_NAME]; <span class=\"comment\">// ASCII字符串（节名），可自定义，只截取8个字节，可以8个字节都是名字</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">union</span> &#123;</span> <span class=\"comment\">// Misc，双字，是该节在没有对齐前的真实尺寸，该值可以不准确</span></span><br><span class=\"line\">        DWORD   PhysicalAddress; <span class=\"comment\">// 真实宽度，这两个值是一个联合结构，可以使用其中的任何一个</span></span><br><span class=\"line\">        DWORD   VirtualSize; <span class=\"comment\">// 一般是取后一个</span></span><br><span class=\"line\">    &#125; Misc;\t\t\t\t\t</span><br><span class=\"line\">    DWORD   VirtualAddress; <span class=\"comment\">// 在内存中的偏移地址，加上ImageBase才是在内存中的真正地址</span></span><br><span class=\"line\">    DWORD   SizeOfRawData; <span class=\"comment\">// 节在文件中对齐后的尺寸</span></span><br><span class=\"line\">    DWORD   PointerToRawData; <span class=\"comment\">// 节区在文件中的偏移</span></span><br><span class=\"line\">    DWORD   PointerToRelocations; <span class=\"comment\">// 调试相关</span></span><br><span class=\"line\">    DWORD   PointerToLinenumbers; <span class=\"comment\">// 调试相关 </span></span><br><span class=\"line\">    WORD    NumberOfRelocations; <span class=\"comment\">// 调试相关 </span></span><br><span class=\"line\">    WORD    NumberOfLinenumbers; <span class=\"comment\">// 调试相关 </span></span><br><span class=\"line\">    DWORD   Characteristics; <span class=\"comment\">// 节的属性</span></span><br><span class=\"line\">&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;</span><br></pre></td></tr></table></figure>\n<p>我們可以在該PE文件中看一下有多少個<strong>IMAGE_SECTION_HEADER結構體</strong>，如下圖用不同顏色標記的就是每個節，其實通過編輯器右邊的內容你就可以大致知道每個節的表示什麼類型了</p>\n<p><img src=\"https://i.imgur.com/Mr9IbQw.png\" alt=\"\"></p>\n<ul>\n<li><p><strong>.text</strong>  :代碼節(VC) Contains all executable code</p>\n</li>\n<li><p><strong>.code</strong>  : 代碼節(VB/Delphi) Contains imported data such as dll addresses</p>\n</li>\n<li><p><strong>.data</strong>  : 數據節(一般存放已初始化的全局變量，靜態變量) Contains initialized data like global variables ans string literals</p>\n</li>\n<li><p><strong>.rdata</strong>  : 只讀數據節(一般存放只讀數據，如常量字符串，C++虛表) .idata : 輸入數據表(一般用來存放IAT和導入表) Contains any exported data</p>\n</li>\n<li><p><strong>.bss</strong>  : 通常是指用來存放程序中未初始化的全局變量、靜態變量.textbss : 節中同時包含代碼和未初始化全局變量、靜態變量 Contains un-initialized data</p>\n</li>\n<li><p><strong>.rsrc</strong>  : 資源節 Contains all module resources</p>\n</li>\n<li><p><strong>.reloc</strong>  : 重定位表 Contains relocation data for the OS loader</p>\n</li>\n</ul>\n<p>代碼中的註釋可以大致了解到每個成員的作用，其中有2個成員來描述節的大小，分別是沒有對齊前的真實尺寸和對齊後的寬度，這時候會出現一種情況就是對齊前的真實尺寸大於對齊後的寬度，<strong>這就是存在全局變量沒有賦予初始值導致的，在文件存儲中全局變量沒有賦予初始值也就不佔空間，但是在內存中是必須要賦予初始值的，這時候寬度就大了一些</strong>，所以在內存中節是誰大就按照誰去展開。</p>\n<p><img src=\"https://i.imgur.com/X56zhUK.png\" alt=\"\"></p>\n<p>與其他結構體一樣，PE節也有屬性，這就是成員Characteristics，其數據寬度是16位（4字節），其每一數據位對應的屬性如下所示</p>\n<p><img src=\"https://i.imgur.com/Uu3HDYx.png\" alt=\"\"></p>\n<p>更多可以參考如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Section characteristics.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//      IMAGE_SCN_TYPE_REG                   0x00000000  // Reserved.</span></span><br><span class=\"line\"><span class=\"comment\">//      IMAGE_SCN_TYPE_DSECT                 0x00000001  // Reserved.</span></span><br><span class=\"line\"><span class=\"comment\">//      IMAGE_SCN_TYPE_NOLOAD                0x00000002  // Reserved.</span></span><br><span class=\"line\"><span class=\"comment\">//      IMAGE_SCN_TYPE_GROUP                 0x00000004  // Reserved.</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_TYPE_NO_PAD                0x00000008  <span class=\"comment\">// Reserved.</span></span></span><br><span class=\"line\"><span class=\"comment\">//      IMAGE_SCN_TYPE_COPY                  0x00000010  // Reserved.</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_CNT_CODE                   0x00000020  <span class=\"comment\">// Section contains code.</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_CNT_INITIALIZED_DATA       0x00000040  <span class=\"comment\">// Section contains initialized data.</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_CNT_UNINITIALIZED_DATA     0x00000080  <span class=\"comment\">// Section contains uninitialized data.</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_LNK_OTHER                  0x00000100  <span class=\"comment\">// Reserved.</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_LNK_INFO                   0x00000200  <span class=\"comment\">// Section contains comments or some other type of information.</span></span></span><br><span class=\"line\"><span class=\"comment\">//      IMAGE_SCN_TYPE_OVER                  0x00000400  // Reserved.</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_LNK_REMOVE                 0x00000800  <span class=\"comment\">// Section contents will not become part of image.</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_LNK_COMDAT                 0x00001000  <span class=\"comment\">// Section contents comdat.</span></span></span><br><span class=\"line\"><span class=\"comment\">//                                           0x00002000  // Reserved.</span></span><br><span class=\"line\"><span class=\"comment\">//      IMAGE_SCN_MEM_PROTECTED - Obsolete   0x00004000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_NO_DEFER_SPEC_EXC          0x00004000  <span class=\"comment\">// Reset speculative exceptions handling bits in the TLB entries for this section.</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_GPREL                      0x00008000  <span class=\"comment\">// Section content can be accessed relative to GP</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_MEM_FARDATA                0x00008000</span></span><br><span class=\"line\"><span class=\"comment\">//      IMAGE_SCN_MEM_SYSHEAP  - Obsolete    0x00010000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_MEM_PURGEABLE              0x00020000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_MEM_16BIT                  0x00020000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_MEM_LOCKED                 0x00040000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_MEM_PRELOAD                0x00080000</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_ALIGN_1BYTES               0x00100000  <span class=\"comment\">//</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_ALIGN_2BYTES               0x00200000  <span class=\"comment\">//</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_ALIGN_4BYTES               0x00300000  <span class=\"comment\">//</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_ALIGN_8BYTES               0x00400000  <span class=\"comment\">//</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_ALIGN_16BYTES              0x00500000  <span class=\"comment\">// Default alignment if no others are specified.</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_ALIGN_32BYTES              0x00600000  <span class=\"comment\">//</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_ALIGN_64BYTES              0x00700000  <span class=\"comment\">//</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_ALIGN_128BYTES             0x00800000  <span class=\"comment\">//</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_ALIGN_256BYTES             0x00900000  <span class=\"comment\">//</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_ALIGN_512BYTES             0x00A00000  <span class=\"comment\">//</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_ALIGN_1024BYTES            0x00B00000  <span class=\"comment\">//</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_ALIGN_2048BYTES            0x00C00000  <span class=\"comment\">//</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_ALIGN_4096BYTES            0x00D00000  <span class=\"comment\">//</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_ALIGN_8192BYTES            0x00E00000  <span class=\"comment\">//</span></span></span><br><span class=\"line\"><span class=\"comment\">// Unused                                    0x00F00000</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_LNK_NRELOC_OVFL            0x01000000  <span class=\"comment\">// Section contains extended relocations.</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_MEM_DISCARDABLE            0x02000000  <span class=\"comment\">// Section can be discarded.</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_MEM_NOT_CACHED             0x04000000  <span class=\"comment\">// Section is not cachable.</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_MEM_NOT_PAGED              0x08000000  <span class=\"comment\">// Section is not pageable.</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_MEM_SHARED                 0x10000000  <span class=\"comment\">// Section is shareable.</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_MEM_EXECUTE                0x20000000  <span class=\"comment\">// Section is executable.</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_MEM_READ                   0x40000000  <span class=\"comment\">// Section is readable.</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IMAGE_SCN_MEM_WRITE                  0x80000000  <span class=\"comment\">// Section is writeable.</span></span></span><br></pre></td></tr></table></figure>\n<h1 id=\"RVA-與-FOA-的轉換\"><a href=\"#RVA-與-FOA-的轉換\" class=\"headerlink\" title=\"RVA 與 FOA 的轉換\"></a>RVA 與 FOA 的轉換</h1><h1 id=\"PE空白區添加代碼\"><a href=\"#PE空白區添加代碼\" class=\"headerlink\" title=\"PE空白區添加代碼\"></a>PE空白區添加代碼</h1><h1 id=\"EAT-Export-Address-Table-導出表\"><a href=\"#EAT-Export-Address-Table-導出表\" class=\"headerlink\" title=\"EAT ( Export Address Table, 導出表 )\"></a>EAT ( Export Address Table, 導出表 )</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IMAGE_EXPORT_DIRECTORY</span> &#123;</span></span><br><span class=\"line\">    DWORD   Characteristics; <span class=\"comment\">// 未使用</span></span><br><span class=\"line\">    DWORD   TimeDateStamp; <span class=\"comment\">// 时间戳，表示当前PE文件（DLL）编译时的时间</span></span><br><span class=\"line\">    WORD    MajorVersion; <span class=\"comment\">// 未使用</span></span><br><span class=\"line\">    WORD    MinorVersion; <span class=\"comment\">// 未使用</span></span><br><span class=\"line\">    DWORD   Name; <span class=\"comment\">// 当前导出表文件名字符串的地址</span></span><br><span class=\"line\">    DWORD   Base; <span class=\"comment\">// 导出函数起始序号</span></span><br><span class=\"line\">    DWORD   NumberOfFunctions; <span class=\"comment\">// 所有导出函数的个数</span></span><br><span class=\"line\">    DWORD   NumberOfNames; <span class=\"comment\">// 以函数名字导出的函数个数</span></span><br><span class=\"line\">    DWORD   AddressOfFunctions;<span class=\"comment\">// RVA，导出函数地址表</span></span><br><span class=\"line\">    DWORD   AddressOfNames; <span class=\"comment\">// 导出函数名称表RVA</span></span><br><span class=\"line\">    DWORD   AddressOfNameOrdinals; <span class=\"comment\">// 导出函数序号表RVA</span></span><br><span class=\"line\">&#125; IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;</span><br></pre></td></tr></table></figure>\n<h1 id=\"IAT-Import-Address-Table-導入位址表\"><a href=\"#IAT-Import-Address-Table-導入位址表\" class=\"headerlink\" title=\"IAT ( Import Address Table, 導入位址表 )\"></a>IAT ( Import Address Table, 導入位址表 )</h1><p>PE文件所依賴的模塊以及涉及到依賴模塊中的具體函數都存儲在導入表中，我們可以在PE格式圖的擴展PE頭最後一個成員結構體數組中的第二個結構體找到導出表相關的信息，它有2個成員，一個表示導入表的地址，一個表示導入表的大小</p>\n<p><img src=\"https://i.imgur.com/2wdEYTe.png\" alt=\"\"></p>\n<p>導入表與導出表不同，導出表只有一張，而導入表有很多張，每一張表對應著不同的依賴模塊，導入表的結構如下，它一共有20字節</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IMAGE_IMPORT_DESCRIPTOR</span> &#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">union</span> &#123;</span></span><br><span class=\"line\">        DWORD   Characteristics;</span><br><span class=\"line\">        DWORD   OriginalFirstThunk; <span class=\"comment\">// RVA，指向IMAGE_THUNK_DATA结构数组</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    DWORD   TimeDateStamp; <span class=\"comment\">// 时间戳</span></span><br><span class=\"line\">    DWORD   ForwarderChain;</span><br><span class=\"line\">    DWORD   Name; <span class=\"comment\">// RVA，表示依赖模块名字的地址，这是一串字符串</span></span><br><span class=\"line\">    DWORD   FirstThunk; <span class=\"comment\">// RVA，指向IMAGE_THUNK_DATA结构数组</span></span><br><span class=\"line\">&#125; IMAGE_IMPORT_DESCRIPTOR;</span><br></pre></td></tr></table></figure>\n<h1 id=\"重定位表\"><a href=\"#重定位表\" class=\"headerlink\" title=\"重定位表\"></a>重定位表</h1><p>在PE中最重要的三張表就是導出、導入和重定位表，本章來了解一下重定位表。</p>\n<p>重定位表是什麼？假設某一PE文件使用了一些模塊，這些模塊都有自己的ImageBase（在內存中開始的地址），但是實際上在內存中模塊的ImageBase被別人佔用了，<strong>這時候模塊就需要偏移，換一個新的內存地址去展開</strong>，假設在這模塊中有很多已經寫好了地址的硬編碼（<strong>但凡涉及到直接尋址的指令都需要進行重定位處理</strong>），當換了地址之後就找不到了，甚至會出現安全隱患，所以硬編碼的地址是需要隨著偏移而去修改的，<strong>這時候就需要一張表去記錄需要修正的位置，便於去根據對應偏移修正，這張表我們就稱之為重定位表</strong>；一般來說，<strong>EXE文件是沒有重定位表的</strong>，因為它不會提供函數給其他人用（導出表），所以運行時它理應是第一個載入內存中的，而DLL之類的PE文件則一定是需要重定位表的，因為它並不一定會加載在ImageBase上。</p>\n<p>重定位表的位置信息與導入、導出表一樣，在擴展PE頭的最後一個成員中的第6個結構體，結構體的成員與導入、導出表一樣，分別表示重定位表的起始位置和大小</p>\n<p><img src=\"https://i.imgur.com/OxnC8yf.png\" alt=\"\"></p>\n<p>重定位表中有一個結構體，它一共有8字節</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IMAGE_BASE_RELOCATION</span> &#123;</span>                     </span><br><span class=\"line\">    DWORD   VirtualAddress; <span class=\"comment\">// RVA</span></span><br><span class=\"line\">    DWORD   SizeOfBlock;</span><br><span class=\"line\">&#125; IMAGE_BASE_RELOCATION;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> IMAGE_BASE_RELOCATION ，* PIMAGE_BASE_RELOCATION;</span><br></pre></td></tr></table></figure>","feature":true,"text":" 此篇為各筆記之整理，部分原創內容，資料來源可見下方連結與文後參考資料 了解 PE 結構可以修改 PE 檔案的一些屬性ex. 可以修改程式入口點、修改程式邏輯等… 可執行檔案可執行檔案 (executable file) 指的是可以由作業系統進行加載執行的檔案可執行檔案 也稱為 ...","link":"","photos":[],"count_time":{"symbolsCount":"22k","symbolsTime":"20 mins."},"categories":[],"tags":[{"name":"reverse","slug":"reverse","count":1,"path":"api/tags/reverse.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E5%9F%B7%E8%A1%8C%E6%AA%94%E6%A1%88\"><span class=\"toc-text\">可執行檔案</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E5%90%8C%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1%E7%9A%84%E5%8F%AF%E5%9F%B7%E8%A1%8C%E6%AA%94%E6%A1%88%E7%9A%84%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">不同作業系統的可執行檔案的格式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%93%AA%E4%BA%9B%E9%A0%98%E5%9F%9F%E6%9C%83%E7%94%A8%E5%88%B0-PE-%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">哪些領域會用到 PE 文件格式 ?</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E8%AD%98%E5%88%A5-PE-%E6%AA%94%E6%A1%88\"><span class=\"toc-text\">如何識別 PE 檔案</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PE-%E6%A0%BC%E5%BC%8F%E7%A4%BA%E6%84%8F%E5%9C%96\"><span class=\"toc-text\">PE 格式示意圖</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\"> </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#DOS-Headers\"><span class=\"toc-text\">DOS Headers</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DOS-Stub\"><span class=\"toc-text\">DOS Stub</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#NT-Headers\"><span class=\"toc-text\">NT Headers</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#File-Header\"><span class=\"toc-text\">File Header</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%88%90%E5%93%A1-Machine-%E9%87%8D%E8%A6%81\"><span class=\"toc-text\">成員 Machine ( 重要 )</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%88%90%E5%93%A1-NumberOfSections-%E9%87%8D%E8%A6%81\"><span class=\"toc-text\">成員 NumberOfSections ( 重要 )</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%88%90%E5%93%A1-TimeDateStamp\"><span class=\"toc-text\">成員 TimeDateStamp</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%88%90%E5%93%A1-PointerToSymbolTable-amp-NumberOfSymbols\"><span class=\"toc-text\">成員 PointerToSymbolTable &amp; NumberOfSymbols</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%88%90%E5%93%A1-SizeOfOptionalHeader-%E9%87%8D%E8%A6%81\"><span class=\"toc-text\">成員 SizeOfOptionalHeader ( 重要 )</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%88%90%E5%93%A1-Characteristics-%E9%87%8D%E8%A6%81\"><span class=\"toc-text\">成員 Characteristics ( 重要 )</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BB%A5-010F-%E7%82%BA%E4%BE%8B\"><span class=\"toc-text\">以 010F 為例</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Optional-Header\"><span class=\"toc-text\">Optional Header</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%88%90%E5%93%A1-Magic-%E9%87%8D%E8%A6%81\"><span class=\"toc-text\">成員 Magic ( 重要 )</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%88%90%E5%93%A1-AddressOfEntryPoint-%E9%87%8D%E8%A6%81\"><span class=\"toc-text\">成員 AddressOfEntryPoint ( 重要 )</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%88%90%E5%93%A1-ImageBase-%E9%87%8D%E8%A6%81\"><span class=\"toc-text\">成員 ImageBase ( 重要 )</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%88%90%E5%93%A1-SectionAlignment-amp-FileAlignment-%E9%A0%88%E6%94%B9-%E9%87%8D%E8%A6%81\"><span class=\"toc-text\">&#x3D;&#x3D;成員 SectionAlignment &amp; FileAlignment&#x3D;&#x3D; 須改 ( 重要 )</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%88%90%E5%93%A1-SizeOfImage-%E9%87%8D%E8%A6%81\"><span class=\"toc-text\">成員 SizeOfImage ( 重要 )</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%88%90%E5%93%A1-SizeOfHeaders-%E9%87%8D%E8%A6%81\"><span class=\"toc-text\">成員 SizeOfHeaders ( 重要 )</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%88%90%E5%93%A1-CheckSum-%E9%87%8D%E8%A6%81\"><span class=\"toc-text\">成員 CheckSum ( 重要 )</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%88%90%E5%93%A1-Subsystem-%E9%87%8D%E8%A6%81\"><span class=\"toc-text\">成員 Subsystem ( 重要 )</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%88%90%E5%93%A1-NumberOfRvaAndSizes-%E9%87%8D%E8%A6%81\"><span class=\"toc-text\">成員 NumberOfRvaAndSizes ( 重要 )</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#DLLCharaqcteristics\"><span class=\"toc-text\">DLLCharaqcteristics</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%88%90%E5%93%A1-DataDirectory-%E9%87%8D%E8%A6%81\"><span class=\"toc-text\">成員 DataDirectory ( 重要 )</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Section-Header\"><span class=\"toc-text\">Section Header</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#RVA-%E8%88%87-FOA-%E7%9A%84%E8%BD%89%E6%8F%9B\"><span class=\"toc-text\">RVA 與 FOA 的轉換</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#PE%E7%A9%BA%E7%99%BD%E5%8D%80%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A2%BC\"><span class=\"toc-text\">PE空白區添加代碼</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#EAT-Export-Address-Table-%E5%B0%8E%E5%87%BA%E8%A1%A8\"><span class=\"toc-text\">EAT ( Export Address Table, 導出表 )</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#IAT-Import-Address-Table-%E5%B0%8E%E5%85%A5%E4%BD%8D%E5%9D%80%E8%A1%A8\"><span class=\"toc-text\">IAT ( Import Address Table, 導入位址表 )</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8\"><span class=\"toc-text\">重定位表</span></a></li></ol>","author":{"name":"Chico","slug":"blog-author","avatar":"https://i.imgur.com/NLlg7nN.png","link":"/","description":"","socials":{"github":"https://github.com/chico890921","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"CSS::unicode-range","uid":"158821a355ec40bcc98630f487f0e4d0","slug":"CSS-unicode-range","date":"2022-09-20T18:35:48.000Z","updated":"2022-09-20T18:43:30.072Z","comments":true,"path":"api/articles/CSS-unicode-range.json","keywords":null,"cover":"https://i.imgur.com/WdmJdEm.jpg","text":" 此篇為各筆記之整理，非原創內容，資料來源可見下方連結與文後參考資料 unicode-range 屬性使用方式123456/* &lt;unicode-range&gt; 值 */ unicode-range: U+26; /* 單一 codepoint */ unicode-r...","link":"","photos":[],"count_time":{"symbolsCount":803,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Chico","slug":"blog-author","avatar":"https://i.imgur.com/NLlg7nN.png","link":"/","description":"","socials":{"github":"https://github.com/chico890921","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"20 個實用的前端開發參考資訊整理","uid":"235b11c396ac216898357dcad8a5a1c6","slug":"20-個實用的前端開發參考資訊整理","date":"2022-09-20T08:47:43.000Z","updated":"2022-09-20T10:20:41.131Z","comments":true,"path":"api/articles/20-個實用的前端開發參考資訊整理.json","keywords":null,"cover":"https://i.imgur.com/WdmJdEm.jpg","text":" 此篇為各筆記之整理，非原創內容，資料來源可見下方連結與文後參考資料 原文連結： 20 Useful Docs and Guides for Front-End Developers 看到上面的文章收集了許多前端開發參考資訊，覺得非常實用，故將重點整理如下： CSS Vocabu...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Chico","slug":"blog-author","avatar":"https://i.imgur.com/NLlg7nN.png","link":"/","description":"","socials":{"github":"https://github.com/chico890921","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}